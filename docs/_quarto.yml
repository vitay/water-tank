project:
  type: website

website:
  title: "Water Tank"
  page-navigation: true

  navbar:
    background: black
    pinned: false
    toc: true

    # Sections have their own sidebar. Only list the first file.
    right:
      - text: "Home"
        file: index.qmd
      - text: "Notebooks"
        file: notebooks/index.qmd
      - text: "API Reference"
        file: reference/index.qmd
      - icon: github
        href: https://github.com/vitay/water-tank
        aria-label: GitHub

  sidebar:

    - title: "Home"
      style: "docked"
      contents:
        - index.qmd
        - License.qmd

    - title: "Notebooks"
      style: "docked"
      contents:
        - notebooks/index.qmd
        - notebooks/MackeyGlass.ipynb
        - notebooks/FORCE.ipynb

    - title: "API Reference"
      style: "docked"
      id: dummy-sidebar

  page-footer:
    center: |
      Copyright Julien Vitay

format:
  html:
    theme: [sandstone, assets/webpage.scss]
    toc: true
    page-layout: full
    smooth-scroll: true
    html-math-method: katex

highlight-style: github
code-line-numbers: false

# Tell quarto to read the generated sidebar
metadata-files:
  - _sidebar.yml

# Quartodoc inspects the docstrings for the API
quartodoc:
  # Package to document
  package: water_tank

  title: API reference
  style: pkgdown
  parser: google
  
  # write sidebar data to this file
  sidebar: _sidebar.yml

  sections:
    - title: "**Layers**"
      desc: |
        Layers available for inputs, reservoirs, readouts, etc.

        The objects must be explicitly imported:

        ```python
        import water_tank as wt

        rc = wt.layers.RecurrentLayer(size=200, tau=3.0)
        ```
      package: water_tank.layers
      contents:
        - name: RecurrentLayer
          package: water_tank.layers.RecurrentLayer
        - name: MiconiLayer
          package: water_tank.layers.MiconiLayer
        - name: LinearReadout
          package: water_tank.layers.LinearReadout
        - name: StaticInput
          package: water_tank.layers.StaticInput
        - name: TimeSeriesInput
          package: water_tank.layers.TimeSeriesInput

    - title: "**Projections**"
      desc: Connecting layers with each other.
      package: water_tank
      contents:
        - connect

    - title: "**Learning rules**"
      desc: |
        Learning rules for online training of a projection.


        The objects must be explicitly imported:

        ```python
        import water_tank as wt

        lr = wt.rules.RLS(projection=esn_rc, delta=1e-6)
        ```
      package: water_tank.rules
      contents:
        - name: DeltaLearningRule
          package: water_tank.rules.DeltaLearningRule
        - name: RLS
          package: water_tank.rules.RLS

    - title: "**Random distributions**"
      desc: |
        Simple wrappers around numpy's random distributions.

        The objects must be explicitly imported:

        ```python
        import water_tank as wt

        values = wt.random.Uniform.uniform(-1., 1.).sample((10, 10))
        ```
      package: water_tank.random
      contents:
        - name: Const
        - name: Uniform
        - name: Normal
        - name: Bernouilli

    - title: "**Utilities**"
      desc: Various tools to facilitate simulations. 
      contents:
        - Recorder
